{"version":3,"sources":["component/AppBar/index.tsx","component/EditableTable/utils.ts","apis/base.api.ts","globals.ts","apis/routes.ts","apis/protected.api.ts","services/doctor.service.ts","component/EditableTable/index.tsx","component/Footer/index.tsx","App.tsx","index.tsx"],"names":["AppBar","className","parseCsvData","csvData","a","columnsIndex","addressCount","data","map","columnName","index","match","tempAddress","tempAddress2","push","tempData","rowData","rowIndex","addresses","dataObject","length","addressIndex","HttpClient","baseURL","instance","_initializeResponseInterceptor","interceptors","response","use","_handleResponse","_handleError","error","Promise","reject","this","axios","create","timeout","SERVER_URL","routes","DOCTOR","MainApiProtected","_initializeRequestInterceptor","request","_handleRequest","config","headers","localStorage","getItem","addDoctorInfo","post","getDoctorInfo","get","editDoctorInfo","doctorId","deleteDoctorInfo","DoctorService","protectedApiService","Container","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","initialColumns","title","field","type","validate","phoneNumber","toString","firstName","lastName","groupName","city","state","zip","county","address","EditableTable","useState","columns","setColumns","setData","addressColumns","setAddressColumns","useEffect","fetchInfo","apiService","res","formattedData","formatData","tempAddressColumns","newColumns","count","includes","addInfo","combinedData","concat","handleOnDrop","newData","onDrop","onError","err","file","inputElem","reason","console","log","addRemoveButton","removeButtonColor","onRemoveFile","icons","options","pageSize","editable","onRowAdd","resolve","setTimeout","onRowUpdate","oldData","dataUpdate","tableData","id","_id","onRowDelete","dataDelete","splice","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.784d5221.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\nexport default function AppBar() {\n  return (\n    <div className={'app-bar'}>\n      <div>\n        Constellation4\n      </div>\n    </div>\n  );\n}\n","// @ts-nocheck\nexport async function parseCsvData (csvData:[Object]) {\n    let columnsIndex = {};\n    let addressCount = 1;\n    /* Checks each column name and stores it's index. So that the order of the columns in the uploaded csv does not matter\n       as long as the column name is correct.\n    */\n    csvData[0]?.data?.map((columnName,index)=>{\n      let phoneNumber = columnName.match(/phone number/gi);\n      if (phoneNumber) columnsIndex['phoneNumber'] = index;\n      let firstName = columnName.match(/first name/gi);\n      if (firstName) columnsIndex['firstName'] = index;\n      let lastName = columnName.match(/last name/gi);\n      if (lastName) columnsIndex['lastName'] = index;\n      let city = columnName.match(/city/gi);\n      if (city) columnsIndex['city'] = index;\n      let county = columnName.match(/county/gi);\n      if (county) columnsIndex['county'] = index;\n      let groupName = columnName.match(/group name/gi);\n      if (groupName) columnsIndex['groupName'] = index;\n      let zip = columnName.match(/zip/gi);\n      if (zip) columnsIndex['zip'] = index;\n      let state = columnName.match(/state/gi);\n      if (state) columnsIndex['state'] = index;\n      let address = columnName.match(/^address$/i);\n      if (address) {\n        columnsIndex['addresses'] = [index];\n        ++addressCount;\n      }\n      //Check for additional addresses\n      if(addressCount !== 1) {\n        let tempAddress = columnName.match(`address${addressCount}`);\n        let tempAddress2 = columnName.match(`Address${addressCount}`);\n        if ((tempAddress || tempAddress2)) {\n          columnsIndex['addresses'].push(index);\n            ++addressCount;\n        }\n      }\n    });\n\n  /*Creates the appropriate number of columns (Address, Address2, etc) based on the highest number of addresses, \n    and fills the info from the csv.\n  */\n \n    let tempData = [];\n    csvData.map((rowData,rowIndex)=>{\n      let addresses = [];\n      let dataObject = {};\n      if (rowIndex !=0 && rowData.data.length !== 1) {\n        columnsIndex['addresses'].map((addressIndex,index) => {\n          if (rowData.data[addressIndex] !== '') {\n            addresses.push(rowData.data[addressIndex]);\n          if (addresses.length > 1) {\n            let count = index + 1;\n            dataObject[`address${count}`] = addresses[index];\n          }\n        }\n        });\n\n        dataObject['phoneNumber'] = rowData.data[columnsIndex['phoneNumber']];\n        dataObject['firstName'] = rowData.data[columnsIndex['firstName']];\n        dataObject['lastName'] = rowData.data[columnsIndex['lastName']];\n        dataObject['groupName'] = rowData.data[columnsIndex['groupName']];\n        dataObject['city'] = rowData.data[columnsIndex['city']];\n        dataObject['state'] = rowData.data[columnsIndex['state']];\n        dataObject['zip'] = rowData.data[columnsIndex['zip']];\n        dataObject['county'] = rowData.data[columnsIndex['county']];\n        dataObject['addresses'] = addresses;\n\n        tempData.push(dataObject);\n      }\n    });\n    return tempData;\n  }","import axios, { AxiosInstance } from 'axios';\n\nclass HttpClient {\n  instance: AxiosInstance;\n\n  constructor(baseURL: string) {\n    this.instance = axios.create({\n      baseURL,\n      timeout: 5000\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError\n    );\n  }\n\n  _handleResponse = (data: any) => data.data;\n\n  _handleError = (error: string) => Promise.reject(error);\n}\n\nexport default HttpClient;\n","export const SERVER_URL = 'https://editable-dashboard-server.noskhil.repl.co/api/';\n\nexport function getUserToken(): string | null {\n  return localStorage.getItem('@USER-TOKEN');\n}\n","const routes = {\n  DOCTOR: '/doctor',\n};\n\nexport default routes;\n","import HttpClient from './base.api';\nimport { getUserToken, SERVER_URL } from '../globals';\nimport { AxiosRequestConfig } from 'axios';\nimport routes from './routes';\n\nclass MainApiProtected extends HttpClient {\n  constructor() {\n    super(`${SERVER_URL}`);\n\n    this._initializeRequestInterceptor();\n  }\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(\n      this._handleRequest,\n      this._handleError\n    );\n  }\n\n  _handleRequest = (config: AxiosRequestConfig) => {\n    config.headers['authorization'] = `Bearer ${getUserToken()}`;\n\n    return config;\n  }\n\n  addDoctorInfo = async (data: [Object]) => {\n    return await this.instance.post(`${routes.DOCTOR}/add/info`,data);\n  }\n\n  getDoctorInfo = async () => {\n    return await this.instance.get(`${routes.DOCTOR}/fetch/info`);\n  }\n\n  editDoctorInfo = async (doctorId: String, data: Object ) => {\n    return await this.instance.post(\n      `${routes.DOCTOR}/edit/${doctorId}`,data\n    );\n  }\n\n  deleteDoctorInfo = async (doctorId: String) => {\n    return await this.instance.get(`${routes.DOCTOR}/delete/${doctorId}`);\n  }\n}\n\nexport default MainApiProtected;\n","import { Container } from 'typedi'\nimport { MainApiProtected } from '../apis';\n\nclass DoctorService {\n  protectedApiService: MainApiProtected;\n\n  constructor() {\n    this.protectedApiService = Container.get(MainApiProtected);\n  }\n\n  getDoctorInfo = (): Promise<any> => {\n    try {\n      return this.protectedApiService.getDoctorInfo();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  addDoctorInfo = (data: [Object]): Promise<any> => {\n    try {\n      return this.protectedApiService.addDoctorInfo(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  editDoctorInfo = (doctorId: String, data: Object): Promise<any> => {\n    try {\n      return this.protectedApiService.editDoctorInfo(doctorId,data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  deleteDoctorInfo = (doctorId:String): Promise<any> => {\n    try {\n      return this.protectedApiService.deleteDoctorInfo(doctorId);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default DoctorService;\n","// @ts-nocheck\nimport \"./styles.css\";\nimport React, { useState,forwardRef, useEffect } from \"react\";\nimport { parseCsvData } from \"./utils\";\nimport Container from \"typedi\";\nimport DoctorService from \"../../services/doctor.service\";\nimport { CSVReader } from 'react-papaparse'\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst initialColumns = [\n  { title: \"Phone Number\", field: \"phoneNumber\", type: \"numeric\" as const, validate: rowData => rowData.phoneNumber?.toString().length === 10},\n  { title: \"First Name\", field: \"firstName\", type: \"string\" as const,  validate: rowData => rowData.firstName?.length > 0 },\n  {\n    title: \"Last Name\",\n    field: \"lastName\",\n    type: \"string\" as const,\n    validate: rowData => rowData.lastName?.length > 0\n  },\n  {\n    title: \"Group Name\",\n    field: \"groupName\",\n    type: \"string\" as const,\n    validate: rowData => rowData.groupName?.length > 0\n  },\n  {\n    title: \"City\",\n    field: \"city\",\n    type: \"string\" as const,\n    validate: rowData => rowData.city?.length > 0\n  },\n  {\n    title: \"State\",\n    field: \"state\",\n    type: \"string\" as const,\n    validate: rowData => rowData.state?.length > 0\n  },\n  { title: \"Zip\", field: \"zip\", type: \"numeric\" as const, validate: rowData => rowData.zip?.toString().length === 5},\n  {\n    title: \"County\",\n    field: \"county\",\n    type: \"string\" as const,\n    validate: rowData => rowData.county?.length > 0\n  },\n  {\n    title: \"Address\",\n    field: \"address\",\n    type: \"string\" as const,\n    validate: rowData => rowData.address?.length > 0\n  },\n];\n\nexport default function EditableTable() {\n  const [columns, setColumns] = useState(initialColumns);\n  const [data, setData] = useState([]);\n  const [addressColumns, setAddressColumns] = useState([]);\n  useEffect(() => {\n    fetchInfo();\n  }, []);\n\n  const fetchInfo = async () => {\n    const apiService = Container.get(DoctorService);\n    const res = await apiService.getDoctorInfo();\n    const formattedData = formatData(res);\n    setData(formattedData);\n  };\n\n  const formatData = (data) => {\n    let tempData = data;\n    let tempAddressColumns = addressColumns;\n    let newColumns = initialColumns;\n    tempData.map(rowData=> {\n      rowData[`address`] = rowData.addresses[0];\n      rowData.addresses.map((address,index)=>{\n        if(index > 0) {\n          let count = index + 1;\n          rowData[`address${count}`] = address;\n        if (!tempAddressColumns.includes(count)) {\n          newColumns.push({\n            title: `Address${count}`,\n            field: `address${count}`,\n            type: \"string\" as const,\n            addressIndex: count,\n          });\n          tempAddressColumns.push(count)\n        }\n        }\n      })\n    });\n    setColumns(newColumns);\n    setAddressColumns(tempAddressColumns);\n    return tempData;\n  };\n\n  const addInfo = async (csvData) => {\n    const apiService = Container.get(DoctorService);\n    const res = await apiService.addDoctorInfo(csvData);\n    const combinedData = data.concat(res);\n    const formattedData = formatData(combinedData);\n    setData(formattedData);\n  };\n\n  const handleOnDrop = async (newData) => {\n      const formattedData = await parseCsvData(newData);\n      addInfo(formattedData);\n  }\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  const handleOnRemoveFile = (data) => {\n\n  }\n  \n  return (\n    <div className=\"DoctorInfo\">\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        addRemoveButton\n        removeButtonColor='#659cef'\n        onRemoveFile={handleOnRemoveFile}\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Doctor/Clinic Info\"\n        columns={columns}\n        data={data}\n        options={{\n          pageSize:10,\n        }}\n        editable={{\n          onRowAdd: (newData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(async () => {\n                setData([...data, newData]);\n                let tempData = newData;\n                tempData['addresses'] = [newData['address']];\n                addressColumns.map(addressIndex=>{\n                  if (newData[`address${addressIndex}`]) tempData['addresses'].push(newData[`address${addressIndex}`]);\n                });\n                const apiService = Container.get(DoctorService);\n                const res = await apiService.addDoctorInfo([tempData]);\n                resolve();\n              }, 1000);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(async () => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                let tempData = newData;\n                tempData['addresses'] = [newData['address']];\n                addressColumns.map(addressIndex=>{\n                  if (newData[`address${addressIndex}`]) tempData['addresses'].push(newData[`address${addressIndex}`]);\n                });\n                const apiService = Container.get(DoctorService);\n                const res = await apiService.editDoctorInfo(newData._id,tempData);\n                resolve();\n              }, 1000);\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(async () => {\n                let dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData(dataDelete);\n                const apiService = Container.get(DoctorService);\n                const res = await apiService.deleteDoctorInfo(oldData._id);\n                resolve();\n              }, 1000);\n            })\n        }}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles.css';\n\nexport default function Footer() {\n  return (\n    <div className={'footer-container'}>\n      &copy; 2021 Shyam Akhil.\n    </div>\n  );\n}\n","import React from 'react';\nimport AppBar from './component/AppBar';\nimport EditableTable from './component/EditableTable';\nimport Footer from './component/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <EditableTable />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}